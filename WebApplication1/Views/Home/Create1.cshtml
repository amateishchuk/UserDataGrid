@model WebApplication1.Models.CreateUserViewModel

        @using (Html.BeginForm("Create", "Home", FormMethod.Post, new { autocomplete = "off"}))
        {
            <div class="modal-content">
                <div class="modal-header">
                    <button class="close" data-dismiss="modal" area-hidden="true">x</button>
                    <h4>Add new user</h4>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal" role="form">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group has-feedback login-form-group">
                            @Html.LabelFor(model => model.Login, htmlAttributes: new { @class = "control-label col-xs-3" })
                            <div class="col-xs-6">
                                @Html.EditorFor(model => model.Login, new { htmlAttributes = new { @class = "form-control", required = "required", pattern = "[A-Za-z0-9]{6,}", placeholder = "letters or/and digits, at least 6" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-xs-3" })
                            <div class="col-xs-6">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", required = "required", pattern = "[A-Za-z]{3,}", placeholder = "only letters", } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-xs-3" })
                            <div class="col-xs-6">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", required = "required", pattern = "[A-Za-z]{3,}", placeholder = "only letters" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-xs-3" })
                            <div class="col-xs-6">
                                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", pattern = @"\+\d{12}", placeholder = "+123456789012", maxlength = "13" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-xs-3" })
                            <div class="col-xs-6">
                                @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control", type = "email", placeholder = "mail@e-mail.com" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.HomeAddress, htmlAttributes: new { @class = "control-label col-xs-3" })
                            <div class="col-xs-6">
                                @Html.EditorFor(model => model.HomeAddress, new { htmlAttributes = new { @class = "form-control", placeholder = "Your Address, Street 0" } })
                            </div>
                        </div>

                    </div>
                </div>

                <div class="modal-footer">

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input id="save" type="submit" value="Save" class="btn btn-primary" />
                            <input type="button" value="Close" class="btn btn-default" data-dismiss="modal" />
                        </div>
                    </div>
                </div>
            </div>
        }
<script>
    $(function () {

        $('#Login').keyup(function () {
            $.get("Home/CheckAvialableLogin?login=" + $('#Login').val(), function (data, status) {
                if (data == false) {
                    $('#save').addClass('disabled');
                    $('.login-form-group').addClass('has-error');
                    
                }
                else {
                    $('#save').removeClass('disabled');
                    $('.login-form-group').removeClass('has-error');
                }
            })
        });

        //при нажатии на кнопку с id="save"
        $('#save').hover(function () {
            //переменная formValid
            var formValid = true;
            //перебрать все элементы управления input
            $('input').each(function () {
                //найти предков, которые имеют класс .form-group, для установления success/error
                var formGroup = $(this).parents('.form-group');
                //для валидации данных используем HTML5 функцию checkValidity
                if (this.checkValidity()) {
                    //добавить к formGroup класс .has-success, удалить has-error
                    formGroup.addClass('has-success').removeClass('has-error');
                } else {
                    //добавить к formGroup класс .has-error, удалить .has-success
                    formGroup.addClass('has-error').removeClass('has-success');
                    //отметить форму как невалидную
                    formValid = false;
                }
            });
            //если форма валидна, то
            if (formValid) {
                //сркыть модальное окно
                $('#myModal').modal('hide');
            }
        });
    });
</script>